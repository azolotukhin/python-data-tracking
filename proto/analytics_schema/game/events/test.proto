syntax = "proto3";

package analytics_schema.game.events.test;

import "analytics_schema/options.proto";
import "analytics_schema/game/segments.proto";


message NestedMessage {
    string nested_field = 1;
}

enum TestEnum {
    ZERO = 0;
    ONE = 1;
    TWO = 2;
}


message TestMessage {
    option (analytics_schema.message_meta).table_meta = {
        NAME: "Test"
    };
    option (analytics_schema.message_meta).table_meta.ReplicatedMergeTree = {
        ORDER_BY: "date, player_id, sipHash64(player_id)"
    };

    string uuid = 1 [
        (analytics_schema.field_meta) = {
            clickhouse_data_type: "UUID"
        }
    ]; // unique event id
    string date = 2 [
        (analytics_schema.field_meta) = {
            clickhouse_data_type: "Date"
        }
    ]; // date of event, used for PARTITION_BY
    string datetime = 3 [
        (analytics_schema.field_meta) = {
            clickhouse_data_type: "DateTime"
        }
    ];  // datetime of event
    string player_id = 4; // player id (primary key)
    string client_ip = 5; // client remote api
    string source_type = 6; // source of event (prod, dev)
    Segments PS = 7; // player segments

    string test = 8;
    NestedMessage nested_message = 9;
    TestEnum enum_test_field = 10;
}


message TestKafkaMessage {
    option (analytics_schema.message_meta).table_meta = {
        NAME: "TestKafka"
        AS: "Test"
    };
    option (analytics_schema.message_meta).table_meta.Kafka = {
        kafka_broker_list: "localhost:9090"
        kafka_topic_list: "test_topic"
        kafka_group_name: "test_group"
        kafka_format: "JSONEachRow"
    };
}


message TestDistributedMessage {
    option (analytics_schema.message_meta).table_meta = {
        NAME: "d_Test"
        AS: "Test"
    };
    option (analytics_schema.message_meta).table_meta.Distributed = {
        table_name: "Test"
        sharding_key: "sipHash64(player_id)"
    };
}

message TestMaterializedViewMessage {
    option (analytics_schema.message_meta).view_meta = {
        NAME: "test_consumer"
        MATERIALIZED: true
        TO: "Test"
        AS_SELECT: "* FROM bfg.TestKafka"
    };
}